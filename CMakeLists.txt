cmake_minimum_required (VERSION 2.8)
cmake_policy(SET CMP0005 NEW)
project (neron)

function(SysConf)
    include(ProcessorCount)
    ProcessorCount(NUM_PROCESSORS)
    message("CPU_PROCESSORS: ${NUM_PROCESSORS}")
    execute_process (COMMAND bash -c "lscpu | grep '^Core\(s\) per socket:' | awk -F':' ' {gsub (\" \", \"\", $2);print $2}'" OUTPUT_VARIABLE NUM_CORES)
    string(REGEX MATCH "[0-9]+" NUM_CORES "${NUM_CORES}")
    message("CPU_CORES: ${NUM_CORES}")
    add_definitions(-DNUM_CPU_CORES=${NUM_CORES})
    execute_process(COMMAND  bash -c "lscpu | awk -F':' '/^L1d cache:/ {gsub (\" \", \"\", $2);print $2}'" OUTPUT_VARIABLE L1D_CACHE)
    execute_process(COMMAND  bash -c "lscpu | awk -F':' '/^L2 cache:/ {gsub (\" \", \"\", $2);print $2}'" OUTPUT_VARIABLE L2_CACHE)
    string(REGEX MATCH "[0-9]+" L1D_CACHE_SIZEK "${L1D_CACHE}")
    string(REGEX MATCH "[0-9]+" L2_CACHE_SIZEK "${L2_CACHE}")

    message("L1d cache: ${L1D_CACHE_SIZEK}K")
    message("L2 cache: ${L2_CACHE_SIZEK}K")

    add_definitions(-DL1D_CACHE_SIZEK=${L1D_CACHE_SIZEK})
    add_definitions(-DL2_CACHE_SIZEK=${L2_CACHE_SIZEK})
endfunction()

SysConf()

if ("${BUILD_TYPE}" STREQUAL "rel")
    set (CMAKE_BUILD_TYPE "Release")
elseif ("${BUILD_TYPE}" STREQUAL "dbg")
    set (CMAKE_BUILD_TYPE "Debug")
elseif ("${BUILD_TYPE}" STREQUAL "mem")
    set (CMAKE_BUILD_TYPE "Debug")
    set (BUILD_SHARED_EXES TRUE)
else ()
    set (CMAKE_BUILD_TYPE "Release")
endif()

function(sanity_macro var default)
    string (TOLOWER "${var}" lower_var) 
    if ( (NOT (DEFINED ${var})) AND (DEFINED ${lower_var}))
        set (${var} ${${lower_var}})
    else()
    endif()
    if(DEFINED ${var})
        if("${${var}}" STREQUAL "")
            set(${var} 1)
        endif()
    else()
        set(${var} ${default})
    endif()
    add_definitions(-D${var}=${${var}})
    message("-D${var}=${${var}}")
endfunction()

function(passthrough var)
    if(DEFINED ${var})
        add_definitions(-D${var}=${${var}})
        message("-D${var}=${${var}}")
    endif()
endfunction()

#sanity_macro(ENABLE_OMP)
#sanity_macro(ENABLE_BLAS)
#sanity_macro(ENABLE_AVX)
sanity_macro(ENABLE_BLISLAB 0)

set(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -O0 -Wall -g -ggdb -std=c++14 -pg ")
set(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3 -Wall -std=c++14")

SET(LIBBLAS "-lopenblas")
if("${ENABLE_BLISLAB}" STREQUAL "1")
    link_libraries(-lblislab -L${CMAKE_CURRENT_SOURCE_DIR}/)
endif()


set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-maybe-uninitialized")

include_directories(include)
###################### gemm #################
SET(SRC_LIST test/test.cpp)
add_executable(gemm ${SRC_LIST})
#add_dependencies(gemm gemm.hpp)
target_compile_options(gemm PRIVATE  -mavx2 -mfma -L. -fopenmp -Wno-maybe-uninitialized)
target_compile_definitions (gemm PRIVATE -DENABLE_OMP=1)
target_link_libraries(gemm ${LIBBLAS})
target_link_libraries(gemm -fopenmp)
###################### gemm.f64 #################
SET(SRC_LIST test/test.cpp)
add_executable(gemm.f64 ${SRC_LIST})
#add_dependencies(gemm.f64 gemm.hpp)
target_compile_options(gemm.f64 PRIVATE  -L. -fopenmp)
target_compile_definitions (gemm.f64  PRIVATE -DENABLE_OMP=1)
target_link_libraries(gemm.f64 ${LIBBLAS})
target_link_libraries(gemm.f64 -fopenmp)
###################### gemm.sse #################
SET(SRC_LIST test/test.cpp)
add_executable(gemm.sse ${SRC_LIST})
#add_dependencies(gemm.sse gemm.hpp)
target_compile_options(gemm.sse PRIVATE  -L. -msse3 -fopenmp -DENABLE_OMP=1)
target_link_libraries(gemm.sse ${LIBBLAS})
target_link_libraries(gemm.sse -fopenmp)
###################### gemm.st no openmp #################
SET(SRC_LIST test/test.cpp)
add_executable(gemm.st ${SRC_LIST})
#add_dependencies(gemm.st gemm.hpp)
target_compile_options(gemm.st PRIVATE  -mavx2 -mfma -L.)
target_compile_options(gemm.st PRIVATE  -Wno-unknown-pragmas)
target_compile_definitions (gemm.st   PRIVATE -DENABLE_BLISLAB=0)
target_link_libraries(gemm.st ${LIBBLAS})
target_link_libraries(gemm.st -fopenmp)
###################### gemm.avx2 #################
#SET(SRC_LIST gemm.avx2.S)
#add_executable(gemm.avx2 ${SRC_LIST})
##PROJECT(gemm.avx2 C CXX)
#set_target_properties(gemm.avx2 PROPERTIES LINKER_LANGUAGE CXX)
#set_property(SOURCE gemm.avx2.S PROPERTY LANGUAGE C)
#target_compile_options(gemm.avx2 PRIVATE  -mavx2 -mfma -L. -fopenmp)
#target_compile_definitions (gemm.avx2 PRIVATE -DENABLE_OMP=1)
#target_link_libraries(gemm.avx2 ${LIBBLAS})
#target_link_libraries(gemm.avx2 -fopenmp)
###################### test ###############################
#list(APPEND CMAKE_CTEST_COMMAND "--verbose")
set(CMAKE_CTEST_COMMAND "${CMAKE_CTEST_COMMAND} --verbose")
enable_testing()
add_test(test_4k gemm -K 4 -l 5 -t 8)
add_test(test_5k gemm -K 5 -l 5 -t 8 -b320)
add_test(test_6k gemm -K 6 -l 5 -t 8)
add_test(test_7k gemm -K 7 -l 5 -t 8 -b320)
add_test(test_8k gemm -K 8 -l 5 -t 8)
